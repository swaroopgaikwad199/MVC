@model TnT.Models.AS2.M_ServersAS2

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Home/_Layout.cshtml";
}

<h2>
    @TnT.LangResource.GlobalRes.ServerAs2EditChangesofserver.
    <a style="float:right; margin-right:5px;" href='@Url.Action("Index", "ServersAS2")' class="btn btn-danger btn-icon icon-left">
        @TnT.LangResource.GlobalRes.cmnBtnBackToList
        <i class="fa fa-reply"></i>
    </a>
</h2>
<hr />

<div class="row">
    <div class="col-md-10">
        @using (Html.BeginForm("Edit", "ServersAS2", FormMethod.Post, new { enctype = "multipart/form-data",@id="frmEdit" } ))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.SelfPrivateKeyPath)
                @Html.HiddenFor(model => model.SelfPublicKeyPath)
                @Html.HiddenFor(model => model.HostPublicKeyPath)
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "AS2SeverName" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HostAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HostAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HostAddress, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.HostPort, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HostPort, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.HostPort, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FromName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FromName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FromName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ToName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ToName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ToName, "", new { @class = "text-danger" })
                    </div>
                </div>

              
                <div class="form-group">
                    @Html.LabelFor(model => model.SelfPrivateKeyPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SelfPrivateKeyPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SelfPrivateKeyPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SelfPublicKeyPath, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("SelfPublicKeyFile", "", new { type = "file", @class = "form-control"@*, @required = "required"*@, @id = "Selfpublickeyfile" })                     
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SelfPrivateKeyPath, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("SelfPrivateKeyFile", "", new { type = "file", @class = "form-control"@*, @required = "required"*@, @id = "Selfprivatekeyfile" })
                    </div>,
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.HostPublicKeyPath, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("HostPublicKeyFile", "", new { type = "file", @class = "form-control"@*, @required = "required"*@ ,@id = "Hostpublickeyfile"})
                    </div>
                </div>

              

                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.IsActive)
                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        @*<input type="submit" value="Save" class="btn btn-default" />*@
                        <input id="btnSubmit" type="button" value="@TnT.LangResource.GlobalRes.cmnBtnSave" class="btn btn-info btn-default" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>


<script>
    $(document).ready(function () {

        $("#btnSubmit").click(function () {


            var AS2SeverName = $("#AS2SeverName").val();
            var HostAddress = $("#HostAddress").val();
            var HostPort = $("#HostPort").val();
            var FromName = $("#FromName").val();
            var ToName = $("#ToName").val();
            var SelfPrivateKeyPassword = $("#SelfPrivateKeyPassword").val();
            var Selfpublickeyfile = $("#Selfpublickeyfile").val();
            var Selfprivatekeyfile = $("#Selfprivatekeyfile").val();
            var Hostpublickeyfile = $("#Hostpublickeyfile").val();


            var msgPOST = "";

            if (AS2SeverName == "") {
                showMessage("AS2SeverName", "@TnT.LangResource.GlobalRes.showMsgName");
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgName";
            } else {
                clearColor("AS2SeverName");
            }

           if (HostAddress == "") {
                showMessage("HostAddress", "@TnT.LangResource.GlobalRes.showMsgHostAddress");
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgHostAddress";
            } else {
                clearColor("HostAddress");
            }

            if (HostPort == "") {
                showMessage("HostPort", "@TnT.LangResource.GlobalRes.showMsgHostPort");
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgHostPort";
            } else {
                clearColor("HostPort");
            }

            if (FromName == "") {
                showMessage("FromName", "@TnT.LangResource.GlobalRes.showMsgFromName");
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgFromName";
            } else {
                clearColor("FromName");
            }

            if (ToName == "") {
                showMessage("ToName", "@TnT.LangResource.GlobalRes.showMsgToName")
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgToName";
            } else {
                clearColor("ToName");
            }

            if (SelfPrivateKeyPassword == "") {
                showMessage("SelfPrivateKeyPassword", "@TnT.LangResource.GlobalRes.showMsgSelfPrivateKeyPassword")
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgSelfPrivateKeyPassword";
            } else {
                clearColor("SelfPrivateKeyPassword");
            }

            if (Selfpublickeyfile == "") {
                showMessage("Selfpublickeyfile", "@TnT.LangResource.GlobalRes.showMsgSelfpublickeyfile")
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgSelfpublickeyfile";
            } else {
                clearColor("Selfpublickeyfile");
            }

            if (Selfprivatekeyfile == "") {
                showMessage("Selfprivatekeyfile", "@TnT.LangResource.GlobalRes.showMsgSelfprivatekeyfile")
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgSelfprivatekeyfile";
            } else {
                clearColor("Selfprivatekeyfile");
            }

            if (Hostpublickeyfile == "") {
                showMessage("Hostpublickeyfile", "@TnT.LangResource.GlobalRes.showMsgHostpublickeyfile")
                msgPOST += "@TnT.LangResource.GlobalRes.showMsgHostpublickeyfile";
            } else {
                clearColor("Hostpublickeyfile");
            }

            if (msgPOST == "") {
                formSubmit();
            }
        });

        function showMessage(elementID, msg) {
            toastr.warning(msg);
            $("#" + elementID).val("");
            $("#" + elementID).css("border", "red 1px solid");
            return false;
        }
        function clearColor(elementID) {
            $("#" + elementID).css("border", "green 1px solid");
        }
    });

    function formSubmit() {
        document.getElementById("frmEdit").submit();
    }

</script>
