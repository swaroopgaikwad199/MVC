@model TnT.Models.Account.Users

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Home/_Layout.cshtml";
}

<h2>
    @TnT.LangResource.GlobalRes.UsersCreate
    <a style="float: right; margin-right: 5px;" href='@Url.Action("Index","Users")' class="btn btn-danger btn-icon icon-left">
       @TnT.LangResource.GlobalRes.cmnBtnBackToList
        <i class="fa fa-reply"></i>
    </a>
   

</h2>

@using (Html.BeginForm("Create", "Users", FormMethod.Post, new {@id = "frmUser" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="frmUsr">
        <h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
        </h4>

        <div class="form-group">
            @Html.Label(@TnT.LangResource.GlobalRes.UsersCreateSelectRole, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserCreate, @data_original_title = "Field Information" })
            <label class="control-label col-md-2"></label>
            <div class="col-md-10">
                @Html.DropDownListFor(M => M.RoleID, new SelectList(ViewBag.Roles, "ID", "Roles_Name"), @TnT.LangResource.GlobalRes.UsersCreateSelectRole, new { @class = "form-control ", @required = "true", @validate = "true", @onchange="updateELEM(this);" })
                @*  @Html.EditorFor(model => model.ExpDateFormat, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.RoleID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserEmail, @data_original_title = "Field Information" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control", @required = "true", @Value = " " } })
                @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserID, @data_original_title = "Field Information" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @required = "true" , @Value = " ", @onchange = "updateELEM(this);" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.UserName1, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserName, @data_original_title = "Field Information" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName1, new { htmlAttributes = new { @class = "form-control", @required = "true", @onchange = "updateELEM(this);" } })
                @Html.ValidationMessageFor(model => model.UserName1, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserPassword, @data_original_title = "Field Information" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @required = "true", @onchange = "updateELEM(this);"} })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2 popover-default", @data_toggle = "popover", @data_trigger = "hover", data_placement = "top", @data_content = TnT.LangResource.GlobalRes.ToolTipUserConfirmPassword, @data_original_title = "Field Information" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @required = "true", @onchange = "updateELEM(this);"} })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>
    

     

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnSubmit" type="button" value="@TnT.LangResource.GlobalRes.UsersCreate" class="btn btn-info btn-default" />
                <input id="btnPost" type="submit" value="@TnT.LangResource.GlobalRes.btnJobCreateSubmit"  style="display:none;" class="btn btn-info btn-default" />
            </div>
        </div>

    </div>
}



<script>
    $("#EmailId").blur(function () {
        var customerEmail = $("#EmailId").val();

        if (!isValidEmailAddress(customerEmail)) {
            toastr.warning("@TnT.LangResource.GlobalRes.toastrCustomerCreatevalidemail");
            $("#EmailId").val("");
            $("#EmailId").css("border", "red 1px solid");
        } else {
            $("#EmailId").css("border", "green 1px solid");
        }

    });
    function isValidEmailAddress(emailAddress) {
        var pattern = new RegExp(/^[+a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/i);
        return pattern.test(emailAddress);
    };

    $(document).ready(function () {

        $('#UserName').change(function () {
            var UserName = $('#UserName').val();


            $.ajax({
                url: 'IsUserExisting',
                type: "POST",
                dataType: 'json',
                data: { "UserID": UserName },
                success: function (data) {
                    if (data == true) {
                        toastr.warning("@TnT.LangResource.GlobalRes.toastrUsersCreateAlredyExist.");
                        $("#UserName").css("border", "red 1px solid");
                        $("#UserName").val("");


                    } else {
                        if (UserName.match(/\s/g)) {
                            toastr.warning("@TnT.LangResource.GlobalRes.toastrUsersCreateInvalidUser");
                            $("#UserName").css("border", "red 1px solid");
                            $("#UserName").val("");
                        }
                        else {
                            $("#UserName").css("border", "green 1px solid");
                        }



                    }
                },
                error: function (data) {

                    toastr.warning("@TnT.LangResource.GlobalRes.toastrCustomerCreateError");

                }
            });
        });

        $('#frmUsr input[type=text], input[type=password]').val("");

        $("#btnSubmit").click(function () {
            var RoleID = $("#RoleID").val();
            var UserName = $("#UserName").val();
            var UserName1 = $("#UserName1").val();
            var Password = $("#Password").val();
            var ConfirmPassword = $("#ConfirmPassword").val();
            var EmailId = $("#EmailId").val();
            var msgPOST = "";
            if (RoleID == "") {
                showMessage("RoleID", "@TnT.LangResource.GlobalRes.toastrUsersCreateSelectRle");
                msgPOST += "@TnT.LangResource.GlobalRes.toastrUsersCreateSelectRle";
            } else {
                clearColor("RoleID");
            }
            if (EmailId == "") {
                showMessage("EmailId", "@TnT.LangResource.GlobalRes.ToolTipEPCISEmailId");
                msgPOST += "@TnT.LangResource.GlobalRes.ToolTipEPCISEmailId";
            } else {
                if (!isValidEmailAddress(EmailId)) {
                    toastr.warning("@TnT.LangResource.GlobalRes.toastrCustomerCreatevalidemail");
                    $("#EmailId").val("");
                    $("#EmailId").css("border", "red 1px solid");
                } else {
                    $("#EmailId").css("border", "green 1px solid");
                }
                //clearColor("EmailId");
            }
            if (UserName == "") {
                showMessage("UserName", "@TnT.LangResource.GlobalRes.toastrUsersCreateProvideUserId");
                msgPOST += "@TnT.LangResource.GlobalRes.toastrUsersCreateProvideUserId";
            } else {
                clearColor("UserName");
            }

            if (UserName1 == "") {
                showMessage("UserName1", "@TnT.LangResource.GlobalRes.toastrUsersCreateProvideUserName");
                msgPOST += "@TnT.LangResource.GlobalRes.toastrUsersCreateProvideUserName";
            } else {
                clearColor("UserName1");
            }

            if (Password == "") {
                showMessage("Password", "@TnT.LangResource.GlobalRes.showMessageSetPasswordProvidePassword");
                msgPOST += "@TnT.LangResource.GlobalRes.showMessageSetPasswordProvidePassword";
            } else {
                clearColor("Password");
            }
            if (ConfirmPassword == "") {
                showMessage("ConfirmPassword", "@TnT.LangResource.GlobalRes.showMessageSetPasswordConfirmPassword")
                msgPOST += "@TnT.LangResource.GlobalRes.showMessageSetPasswordConfirmPassword";
            } else {
                clearColor("ConfirmPassword");
            }

            if (msgPOST == "") {
                formSubmit();
            }
        });
        $("#Password").change(function () {

            var pwdmax = '@ViewData["maxpwd"]';
            var pwdmin = '@ViewData["minpwd"]';
            var Password = $("#Password").val();
            var passMSG = "";

            //validate letter
            if (!(Password.match(/[a-z]/))) {
                passMSG += "@TnT.LangResource.GlobalRes.passMessageSetPasswordValidateLetter.";
            }

            //validate capital letter
            if (!(Password.match(/[A-Z]/))) {
                passMSG += "@TnT.LangResource.GlobalRes.passMessageSetPasswordCapitalLetter.";
            }

            //validate number
            if (!(Password.match(/\d/))) {
                passMSG += "@TnT.LangResource.GlobalRes.passMessageSetPasswordCapitalNumber.";
            }

            //validate number
            if (!(Password.match(/[^\w\s]/))) {
                passMSG += "@TnT.LangResource.GlobalRes.passMessageSetPasswordSpetialCharacter.";
            }

            if (Password.length < pwdmin || Password.length > pwdmax) {
                passMSG += "@TnT.LangResource.GlobalRes.passMessageSetPasswordNeedsMin " + pwdmin + "  and maximum " + pwdmax + " @TnT.LangResource.GlobalRes.passMessageSetPasswordcharacters";
            }


            if (passMSG != "") {
                toastr.warning("@TnT.LangResource.GlobalRes.toastrSetPasswordNeedscombination1 " + pwdmin + " @TnT.LangResource.GlobalRes.toastrSetPasswordNeedscombination2.");
                $("#Password").val('');
                $("#Password").focus();
                $("#Password").css("border", "red 1px solid");
                return false;
            }

        });
        $("#ConfirmPassword").change(function () {
            var Password = $("#Password").val();
            var ConfirmPassword = $("#ConfirmPassword").val();
            if (Password != ConfirmPassword) {
                toastr.warning("@TnT.LangResource.GlobalRes.toastrUsersCreatePwsNotMatcging.");
                $("#ConfirmPassword").val("");
                $("#ConfirmPassword").css("border", "red 1px solid");
                return false;
            }
        });
        function showMessage(elementID, msg) {
            toastr.warning(msg);
            $("#" + elementID).val("");
            $("#" + elementID).css("border", "red 1px solid");
            return false;
        }
        function clearColor(elementID) {
            $("#" + elementID).css("border", "green 1px solid");
        }


    });

    $(function () {
        $('#UserName1').keydown(function (e) {

            var regex = new RegExp("^[a-zA-Z\b\t ]+$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
        });
    });
    function updateELEM(obj) {
        if (obj.value != "") {
            $("#" + obj.id).css("border", "green 1px solid");
        }
    }
    function formSubmit() {
        document.getElementById("frmUser").submit();

    }
</script>